//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Ezequiel Demetras/Documents/Projetos/PgnConverter/src/Pgn.Compiler/Pgn.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Pgn.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PgnLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EVENT=1, SITE=2, DATE=3, ROUND=4, WHITE=5, BLACK=6, WHITEELO=7, BLACKELO=8, 
		WHITETITLE=9, BLACKTITLE=10, RESULT=11, GAMEID=12, VARIANT=13, TIMECONTROL=14, 
		ECO=15, OPENING=16, TERMINATION=17, ANNOTATOR=18, LBRACE=19, RBRACE=20, 
		STRING_VALUE=21, ANALYSIS=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EVENT", "SITE", "DATE", "ROUND", "WHITE", "BLACK", "WHITEELO", "BLACKELO", 
		"WHITETITLE", "BLACKTITLE", "RESULT", "GAMEID", "VARIANT", "TIMECONTROL", 
		"ECO", "OPENING", "TERMINATION", "ANNOTATOR", "LBRACE", "RBRACE", "STRING_VALUE", 
		"ANALYSIS"
	};


	public PgnLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PgnLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Event'", "'Site'", "'Date'", "'Round'", "'White'", "'Black'", 
		"'WhiteElo'", "'BlackElo'", "'WhiteTitle'", "'BlackTitle'", "'Result'", 
		"'GameId'", "'Variant'", "'TimeControl'", "'ECO'", "'Opening'", "'Termination'", 
		"'Annotator'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EVENT", "SITE", "DATE", "ROUND", "WHITE", "BLACK", "WHITEELO", 
		"BLACKELO", "WHITETITLE", "BLACKTITLE", "RESULT", "GAMEID", "VARIANT", 
		"TIMECONTROL", "ECO", "OPENING", "TERMINATION", "ANNOTATOR", "LBRACE", 
		"RBRACE", "STRING_VALUE", "ANALYSIS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pgn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PgnLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,208,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,5,20,196,8,20,10,20,
		12,20,199,9,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,0,0,22,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
		16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,2,2,0,34,34,92,92,1,0,46,46,
		209,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,1,45,1,0,0,0,3,51,1,0,0,0,5,56,1,0,0,0,7,61,1,0,0,0,9,67,1,0,0,0,11,
		73,1,0,0,0,13,79,1,0,0,0,15,88,1,0,0,0,17,97,1,0,0,0,19,108,1,0,0,0,21,
		119,1,0,0,0,23,126,1,0,0,0,25,133,1,0,0,0,27,141,1,0,0,0,29,153,1,0,0,
		0,31,157,1,0,0,0,33,165,1,0,0,0,35,177,1,0,0,0,37,187,1,0,0,0,39,189,1,
		0,0,0,41,191,1,0,0,0,43,202,1,0,0,0,45,46,5,69,0,0,46,47,5,118,0,0,47,
		48,5,101,0,0,48,49,5,110,0,0,49,50,5,116,0,0,50,2,1,0,0,0,51,52,5,83,0,
		0,52,53,5,105,0,0,53,54,5,116,0,0,54,55,5,101,0,0,55,4,1,0,0,0,56,57,5,
		68,0,0,57,58,5,97,0,0,58,59,5,116,0,0,59,60,5,101,0,0,60,6,1,0,0,0,61,
		62,5,82,0,0,62,63,5,111,0,0,63,64,5,117,0,0,64,65,5,110,0,0,65,66,5,100,
		0,0,66,8,1,0,0,0,67,68,5,87,0,0,68,69,5,104,0,0,69,70,5,105,0,0,70,71,
		5,116,0,0,71,72,5,101,0,0,72,10,1,0,0,0,73,74,5,66,0,0,74,75,5,108,0,0,
		75,76,5,97,0,0,76,77,5,99,0,0,77,78,5,107,0,0,78,12,1,0,0,0,79,80,5,87,
		0,0,80,81,5,104,0,0,81,82,5,105,0,0,82,83,5,116,0,0,83,84,5,101,0,0,84,
		85,5,69,0,0,85,86,5,108,0,0,86,87,5,111,0,0,87,14,1,0,0,0,88,89,5,66,0,
		0,89,90,5,108,0,0,90,91,5,97,0,0,91,92,5,99,0,0,92,93,5,107,0,0,93,94,
		5,69,0,0,94,95,5,108,0,0,95,96,5,111,0,0,96,16,1,0,0,0,97,98,5,87,0,0,
		98,99,5,104,0,0,99,100,5,105,0,0,100,101,5,116,0,0,101,102,5,101,0,0,102,
		103,5,84,0,0,103,104,5,105,0,0,104,105,5,116,0,0,105,106,5,108,0,0,106,
		107,5,101,0,0,107,18,1,0,0,0,108,109,5,66,0,0,109,110,5,108,0,0,110,111,
		5,97,0,0,111,112,5,99,0,0,112,113,5,107,0,0,113,114,5,84,0,0,114,115,5,
		105,0,0,115,116,5,116,0,0,116,117,5,108,0,0,117,118,5,101,0,0,118,20,1,
		0,0,0,119,120,5,82,0,0,120,121,5,101,0,0,121,122,5,115,0,0,122,123,5,117,
		0,0,123,124,5,108,0,0,124,125,5,116,0,0,125,22,1,0,0,0,126,127,5,71,0,
		0,127,128,5,97,0,0,128,129,5,109,0,0,129,130,5,101,0,0,130,131,5,73,0,
		0,131,132,5,100,0,0,132,24,1,0,0,0,133,134,5,86,0,0,134,135,5,97,0,0,135,
		136,5,114,0,0,136,137,5,105,0,0,137,138,5,97,0,0,138,139,5,110,0,0,139,
		140,5,116,0,0,140,26,1,0,0,0,141,142,5,84,0,0,142,143,5,105,0,0,143,144,
		5,109,0,0,144,145,5,101,0,0,145,146,5,67,0,0,146,147,5,111,0,0,147,148,
		5,110,0,0,148,149,5,116,0,0,149,150,5,114,0,0,150,151,5,111,0,0,151,152,
		5,108,0,0,152,28,1,0,0,0,153,154,5,69,0,0,154,155,5,67,0,0,155,156,5,79,
		0,0,156,30,1,0,0,0,157,158,5,79,0,0,158,159,5,112,0,0,159,160,5,101,0,
		0,160,161,5,110,0,0,161,162,5,105,0,0,162,163,5,110,0,0,163,164,5,103,
		0,0,164,32,1,0,0,0,165,166,5,84,0,0,166,167,5,101,0,0,167,168,5,114,0,
		0,168,169,5,109,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,97,0,
		0,172,173,5,116,0,0,173,174,5,105,0,0,174,175,5,111,0,0,175,176,5,110,
		0,0,176,34,1,0,0,0,177,178,5,65,0,0,178,179,5,110,0,0,179,180,5,110,0,
		0,180,181,5,111,0,0,181,182,5,116,0,0,182,183,5,97,0,0,183,184,5,116,0,
		0,184,185,5,111,0,0,185,186,5,114,0,0,186,36,1,0,0,0,187,188,5,91,0,0,
		188,38,1,0,0,0,189,190,5,93,0,0,190,40,1,0,0,0,191,197,5,34,0,0,192,196,
		8,0,0,0,193,194,5,92,0,0,194,196,9,0,0,0,195,192,1,0,0,0,195,193,1,0,0,
		0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,
		197,1,0,0,0,200,201,5,34,0,0,201,42,1,0,0,0,202,203,5,123,0,0,203,204,
		7,1,0,0,204,205,5,125,0,0,205,206,1,0,0,0,206,207,6,21,0,0,207,44,1,0,
		0,0,3,0,195,197,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pgn.Compiler
