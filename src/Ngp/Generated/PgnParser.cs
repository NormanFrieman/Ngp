//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/AEVO-EZEQUIEL/Documents/projetos/Ngp/src/Ngp/Pgn.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ngp.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PgnParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, EVENT=2, SITE=3, DATE=4, ROUND=5, WHITE=6, BLACK=7, WHITEELO=8, 
		BLACKELO=9, WHITETITLE=10, BLACKTITLE=11, RESULT=12, GAMEID=13, VARIANT=14, 
		TIMECONTROL=15, ECO=16, OPENING=17, TERMINATION=18, ANNOTATOR=19, WHITEFIDEID=20, 
		BLACKFIDEID=21, STUDYNAME=22, CHAPTERNAME=23, UTCDATE=24, UTCTIME=25, 
		GAMEURL=26, LBRACE=27, RBRACE=28, STRING_VALUE=29, ANALYSIS=30, MOVES=31;
	public const int
		RULE_pgn_info = 0, RULE_info = 1, RULE_attrs = 2;
	public static readonly string[] ruleNames = {
		"pgn_info", "info", "attrs"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'Event'", "'Site'", "'Date'", "'Round'", "'White'", "'Black'", 
		"'WhiteElo'", "'BlackElo'", "'WhiteTitle'", "'BlackTitle'", "'Result'", 
		"'GameId'", "'Variant'", "'TimeControl'", "'ECO'", "'Opening'", "'Termination'", 
		"'Annotator'", "'WhiteFideId'", "'BlackFideId'", "'StudyName'", "'ChapterName'", 
		"'UTCDate'", "'UTCTime'", "'GameURL'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "EVENT", "SITE", "DATE", "ROUND", "WHITE", "BLACK", "WHITEELO", 
		"BLACKELO", "WHITETITLE", "BLACKTITLE", "RESULT", "GAMEID", "VARIANT", 
		"TIMECONTROL", "ECO", "OPENING", "TERMINATION", "ANNOTATOR", "WHITEFIDEID", 
		"BLACKFIDEID", "STUDYNAME", "CHAPTERNAME", "UTCDATE", "UTCTIME", "GAMEURL", 
		"LBRACE", "RBRACE", "STRING_VALUE", "ANALYSIS", "MOVES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pgn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PgnParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PgnParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PgnParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pgn_infoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfoContext[] info() {
			return GetRuleContexts<InfoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InfoContext info(int i) {
			return GetRuleContext<InfoContext>(i);
		}
		public Pgn_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pgn_info; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPgnVisitor<TResult> typedVisitor = visitor as IPgnVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPgn_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pgn_infoContext pgn_info() {
		Pgn_infoContext _localctx = new Pgn_infoContext(Context, State);
		EnterRule(_localctx, 0, RULE_pgn_info);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACE) {
				{
				{
				State = 6;
				info();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PgnParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(PgnParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PgnParser.RBRACE, 0); }
		public InfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPgnVisitor<TResult> typedVisitor = visitor as IPgnVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfoContext info() {
		InfoContext _localctx = new InfoContext(Context, State);
		EnterRule(_localctx, 2, RULE_info);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			Match(LBRACE);
			State = 13;
			attrs();
			State = 14;
			Match(STRING_VALUE);
			State = 15;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PgnParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SITE() { return GetToken(PgnParser.SITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(PgnParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(PgnParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITE() { return GetToken(PgnParser.WHITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACK() { return GetToken(PgnParser.BLACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITEELO() { return GetToken(PgnParser.WHITEELO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKELO() { return GetToken(PgnParser.BLACKELO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITETITLE() { return GetToken(PgnParser.WHITETITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKTITLE() { return GetToken(PgnParser.BLACKTITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(PgnParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GAMEID() { return GetToken(PgnParser.GAMEID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(PgnParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMECONTROL() { return GetToken(PgnParser.TIMECONTROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ECO() { return GetToken(PgnParser.ECO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING() { return GetToken(PgnParser.OPENING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATION() { return GetToken(PgnParser.TERMINATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATOR() { return GetToken(PgnParser.ANNOTATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITEFIDEID() { return GetToken(PgnParser.WHITEFIDEID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKFIDEID() { return GetToken(PgnParser.BLACKFIDEID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STUDYNAME() { return GetToken(PgnParser.STUDYNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAPTERNAME() { return GetToken(PgnParser.CHAPTERNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTCDATE() { return GetToken(PgnParser.UTCDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTCTIME() { return GetToken(PgnParser.UTCTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GAMEURL() { return GetToken(PgnParser.GAMEURL, 0); }
		public AttrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPgnVisitor<TResult> typedVisitor = visitor as IPgnVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrsContext attrs() {
		AttrsContext _localctx = new AttrsContext(Context, State);
		EnterRule(_localctx, 4, RULE_attrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134217724L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,20,2,0,7,0,2,1,7,1,2,2,7,2,1,0,5,0,8,8,0,10,0,12,0,11,9,0,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,0,0,3,0,2,4,0,1,1,0,2,26,17,0,9,1,0,0,0,2,12,
		1,0,0,0,4,17,1,0,0,0,6,8,3,2,1,0,7,6,1,0,0,0,8,11,1,0,0,0,9,7,1,0,0,0,
		9,10,1,0,0,0,10,1,1,0,0,0,11,9,1,0,0,0,12,13,5,27,0,0,13,14,3,4,2,0,14,
		15,5,29,0,0,15,16,5,28,0,0,16,3,1,0,0,0,17,18,7,0,0,0,18,5,1,0,0,0,1,9
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ngp.Generated
